import{l as i,d as _taggedTemplateLiteral,_ as _decorate,s,e,a as _get,b as _getPrototypeOf,C as Chart,c as _toConsumableArray,x,f as e$1,g as _inherits,h as _createSuper,i as _createClass,j as _classCallCheck,k as _assertThisInitialized,r as registerables}from"./chart-48d074a4.js";var _templateObject$1,_templateObject,config={controlName:"chart-pie",groupName:"Charts",fallbackDisableSubmit:!1,description:"Hello World",version:"1.0",properties:{chartData:{type:"string",title:"Data Array"},backgroundColor:{type:"string",title:"Background Color"},displayLegend:{type:"boolean",title:"Display Legend"}},standardProperties:{fieldLabel:!1,description:!1,defaultValue:!1,readOnly:!1}},pluginstyle=i(_templateObject$1=_templateObject$1||_taggedTemplateLiteral(["\n\t/* Add your styles here */\n\n\t:host {\n\t\tdisplay: block;\n\t}\n\n\tcanvas {\n\t\tmax-width: 100%;\n\t\theight: auto;\n\t}\n"])),styles=[pluginstyle],Piechart=_decorate([e$1("chart-pie")],function(s,t){var a=function(){_inherits(i,t);var n=_createSuper(i);function i(){var t;_classCallCheck(this,i);for(var e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];return t=n.call.apply(n,[this].concat(a)),s(_assertThisInitialized(t)),t}return _createClass(i)}();return{F:a,d:[{kind:"field",static:!0,key:"getMetaConfig",value:function(){return function(){return Promise.resolve(config)}}},{kind:"field",static:!0,key:"styles",value:function(){return styles}},{kind:"field",decorators:[e({type:String})],key:"chartData",value:void 0},{kind:"field",decorators:[e({type:String})],key:"backgroundColor",value:void 0},{kind:"field",decorators:[e({type:Boolean})],key:"displayLegend",value:void 0},{kind:"field",key:"chartContainer",value:void 0},{kind:"field",key:"chartInstance",value:void 0},{kind:"method",key:"updated",value:function(t){_get(_getPrototypeOf(a.prototype),"updated",this).call(this,t),(t.has("chartData")||t.has("backgroundColor")||t.has("displayLegend"))&&this.updateChart()}},{kind:"method",key:"updateChart",value:function(){var t,e=void 0===this.displayLegend||this.displayLegend,a=(console.log(e),this.parseChartData());a&&0!==a.length&&(this.chartInstance&&this.chartInstance.destroy(),this.chartContainer=document.createElement("canvas"),null!=(t=this.shadowRoot)&&t.appendChild(this.chartContainer),this.chartInstance?(this.chartInstance.data.labels=a.map(function(t){return t.label}),this.chartInstance.data.datasets=[{data:a.map(function(t){return t.value}),backgroundColor:this.backgroundColor?this.getCustomColors(a.length):this.getDefaultColors(a.length)}],this.chartInstance.options.plugins={legend:{display:e}},this.chartInstance.update()):(Chart.register.apply(Chart,_toConsumableArray(registerables)),this.chartInstance=new Chart(this.chartContainer.getContext("2d"),{type:"pie",data:{labels:a.map(function(t){return t.label}),datasets:[{data:a.map(function(t){return t.value}),backgroundColor:this.backgroundColor?this.getCustomColors(a.length):this.getDefaultColors(a.length)}]},options:{plugins:{legend:{display:e}}}})))}},{kind:"method",key:"getDefaultColors",value:function(t){var a=["#FF0000","#00FF00","#FFFF00","#0000FF"];return Array.from({length:t},function(t,e){return a[e%a.length]})}},{kind:"method",key:"getCustomColors",value:function(t){var a=this.backgroundColor.split(",").map(function(t){return t.trim()});return Array.from({length:t},function(t,e){return a[e%a.length]})}},{kind:"method",key:"parseChartData",value:function(){var t;try{t=JSON.parse(this.chartData)}catch(t){return console.error("Error parsing JSON:",t),null}return Array.isArray(t)&&0!==t.length?t:null}},{kind:"method",key:"render",value:function(){return x(_templateObject=_templateObject||_taggedTemplateLiteral([""]))}}]}},s);export{Piechart};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
